# -*- coding: utf-8 -*-
"""Week6Superstore-Sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EOC7ohdPIFJxy2DdQv40enkbTxFCxXQi

Import Libaries

# Correlation Analysis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/train.csv')

#Check the shapes of dataset
df.shape

#Display dataset
df.head()

#Information of the dataset
df.info()

# Calculate the correlation matrix, excluding non-numeric columns
correlation_matrix = df.select_dtypes(include=np.number).corr()

if 'sales' in correlation_matrix:
    sales_correlation = correlation_matrix['sales']

# Calculate the correlation matrix, explicitly including only numeric columns
sales_correlation = df.corr(numeric_only=True)

sns.heatmap(correlation_matrix, annot=True, cmap='plasma')

"""**2. Scatter Plots: Plot scatter plots to explore the relationship between sales and another**

"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/train.csv')

# Assuming df is your DataFrame with columns 'sales' and 'another_variable'
data = {'sales': [400, 450, 900, 150, 880],
        'another_variable': [50, 55, 60, 35, 59]}
df = pd.DataFrame(data)

# Scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df['another_variable'], df['sales'], color='red', alpha=0.7)
plt.title('Scatter Plot of Sales vs Another Variable')
plt.xlabel('Another Variable')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

"""**3. Pair Plots: Use pair plots for a quick overview of relationships between multiple numeric
variables.**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import datasets

df = pd.read_csv('/content/drive/MyDrive/train.csv')

df = pd.DataFrame(data)

#import the iris dataset
irsi = datasets.load_iris()

# Convert the iris dataset to a DataFrame
iris = pd.DataFrame(irsi.data, columns=irsi.feature_names)

# Create the pair plot
sns.pairplot(iris)

"""**4. Category-wise Sales Trends: Using line charts, analyze how sales trends differ across
different categories.**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

data = {
    'Date': ['2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01'],
    'CategoryA': [600, 40, 30, 880],
    'CategoryB': [90, 35, 25, 180],
    'CategoryC': [90, 70, 20, 15]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Convert the 'Date' column to datetime type
df['Date'] = pd.to_datetime(df['Date'])

# Set 'Date' as the index
df.set_index('Date', inplace=True)

# Plotting line charts for each category
plt.figure(figsize=(10, 5))

for column in df.columns:
    plt.plot(df.index, df[column], label=column)

# Customize the plot
plt.title('Sales Trends Across Different Categories')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()

"""**5. Heatmaps: Create heatmaps to visualize the correlation matrix for better insights.**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/train.csv')

# Creating a random dataset
np.random.seed(42)
data = pd.DataFrame(np.random.rand(10, 5), columns=['p','q','r','s','t'])

correlation_matrix = data.corr()

plt.figure(figsize=(10, 5))
sns.heatmap(correlation_matrix, annot=True, cmap='plasma', fmt=".2f", linewidths=.5)
plt.title("Correlation Matrix Heatmap")
plt.show()

"""**6. Sales by Region: Compare sales across different regions using stacked bar charts.**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/train.csv')

regions = ['North', 'South', 'East', 'West']
sales = [500030, 765432, 600900, 100000]

plt.bar(regions, sales, color='green')
plt.title('Sales Across Different Regions (Bar Chart)')
plt.xlabel('Regions')
plt.ylabel('Sales Amount')
plt.show()

"""Stacked Bar Chart"""

regions = ['North', 'South', 'East', 'West']
product_a = [900000, 700000, 290000, 200000]
product_b = [900000, 500000, 200000, 900000]

plt.bar(regions, product_a, label='Product A', color='red')
plt.bar(regions, product_b, label='Product B', color='green', bottom=product_a)

plt.title('Sales Breakdown by Product Across Different Regions (Stacked Bar Chart)')
plt.xlabel('Regions')
plt.ylabel('Sales Amount')
plt.legend()
plt.show()

"""**7. Customer Segment Analysis: Explore sales trends for different customer segments using
line charts or bar charts.**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

data = {
    'Date': ['2022-01-01', '2022-02-01', '2022-03-01', '2022-01-01', '2022-02-01', '2022-03-01'],
    'Segment': ['A', 'A', 'A', 'B', 'B', 'B'],
    'Sales': [800, 320, 850, 90, 90, 810]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Plotting a Line Chart
plt.figure(figsize=(10, 6))
sns.lineplot(x='Date', y='Sales', hue='Segment', data=df)
plt.title('Sales Trends for Different Customer Segments (Line Chart)')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.show()

# Plotting a Bar Chart
plt.figure(figsize=(10, 5))
sns.barplot(x='Segment', y='Sales', data=df)
plt.title('Sales Trends for Different Customer Segments (Bar Chart)')
plt.xlabel('Customer Segment')
plt.ylabel('Sales')
plt.show()

"""**8. Sales vs. Quantity: Investigate the relationship between sales and quantity sold using
scatter plots.**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

# Example data
sales = np.random.randint(1000, 10011, size=50)
quantity_sold = np.random.randint(1000, 10011, size=50)

# Scatter plot
plt.scatter(quantity_sold, sales, c='green', alpha=0.9)

# Title and labels
plt.title('Relationship between Sales and Quantity Sold')
plt.xlabel('Quantity Sold')
plt.ylabel('Sales')

# Display the plot
plt.show()

"""**9. Customer Segment vs. Quantity: Compare the quantity sold across different customer
segments using bar charts.**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

# data
segments = ['Segment A', 'Segment B', 'Segment C']
quantity_sold = [190, 450, 90]

# Create a bar chart
plt.bar(segments, quantity_sold, color='red')

# Customize the chart
plt.xlabel('Customer Segment')
plt.ylabel('Quantity Sold')
plt.title('Quantity Sold Across Customer Segments')

# Show the chart
plt.show()

"""**10. Discount Impact on Sales: Analyze the impact of discounts on sales using bar charts or
line charts.**
"""

import pandas
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/train.csv')

np.random.seed(100)
discounts = np.arange(0, 89, 5)
sales = np.random.randint(100, 500, len(discounts))

data = pd.DataFrame({'Discount': discounts, 'Sales': sales})

print(data)

# Plot a bar chart
plt.figure(figsize=(10, 5))
sns.barplot(x='Discount', y='Sales', data=data, palette='viridis')
plt.title('Impact of Discounts on Sales (Bar Chart)')
plt.xlabel('Discount (%)')
plt.ylabel('Sales')
plt.show()

# Plot a line chart
plt.figure(figsize=(10, 5))
sns.lineplot(x='Discount', y='Sales', data=data, marker='h', color='r')
plt.title('Impact of Discounts on Sales (Line Chart)')
plt.xlabel('Discount (%)')
plt.ylabel('Sales')
plt.show()

"""**11. Shipping Mode vs. Sales: Explore the relationship between shipping modes and sales
using categorical plots.**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

data = {
    'Shipping Mode': ['Standard', 'Express', 'Standard', 'Express', 'Express', 'Standard', 'Express', 'Standard'],
    'Sales': [2000, 3600, 1650, 2580, 4600, 1880, 69320, 9220]
}

df = pd.DataFrame(data)

plt.figure(figsize=(10, 6))
sns.set_theme(style="whitegrid")
sns.catplot(x='Shipping Mode', y='Sales', data=df, kind='bar', ci=None, palette='viridis')

plt.title('Relationship between Shipping Modes and Sales')
plt.xlabel('Shipping Mode')
plt.ylabel('Sales')
plt.show()

"""**12. Product-wise Sales Analysis: Investigate how sales vary for different products or
categories using bar charts or line charts.**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

data = {'Product': ['A', 'B', 'C', 'D', 'A', 'B', 'C', 'D'],
        'Category': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Electronics', 'Electronics', 'Clothing', 'Clothing'],
        'Sales': [1009, 1950, 890, 1720, 1820, 890, 680, 8110]}

df = pd.DataFrame(data)

plt.figure(figsize=(10, 6))
df_grouped = df.groupby('Category')['Sales'].sum().reset_index()
plt.bar(df_grouped['Category'], df_grouped['Sales'], color='red')
plt.title('Total Sales by Category (Bar Chart)')
plt.xlabel('Category')
plt.ylabel('Total Sales')
plt.show()

df['Date'] = pd.to_datetime(['2024-01-01', '2024-02-01'] * 4, format='%Y-%m-%d')
df_time = df.groupby(['Date', 'Category'])['Sales'].sum().reset_index()

plt.figure(figsize=(10, 6))
for category in df_time['Category'].unique():
    plt.plot(df_time[df_time['Category'] == category]['Date'], df_time[df_time['Category'] == category]['Sales'], marker='h', label=category)

plt.title('Sales Trend Over Time by Category (Line Chart)')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.legend()
plt.show()

"""**13. Region-wise Product Sales: Compare product sales across different regions using
grouped bar charts.**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/train.csv')

# Sample data
regions = ['North', 'South', 'East', 'West']
products = ['Product A', 'Product B', 'Product C']
sales = np.array([
    [2000, 3200, 800],
    [800, 7100, 750],
    [1700, 900, 950],
    [950,8300, 2300]
])

bar_width = 0.2
r1 = np.arange(len(regions))
r2 = [x + bar_width for x in r1]
r3 = [x + bar_width for x in r2]

plt.bar(r1, sales[:, 0], width=bar_width, label='Product A')
plt.bar(r2, sales[:, 1], width=bar_width, label='Product B')
plt.bar(r3, sales[:, 2], width=bar_width, label='Product C')

# Customize chart
plt.xlabel('Region')
plt.ylabel('Sales')
plt.xticks([r + bar_width for r in range(len(regions))], regions)
plt.legend()

# Show the plot
plt.show()

"""**14. Document Findings: Summarize key findings from both univariate and bivariate
analyses. Highlight any notable trends or insights.**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/train.csv')

"""Descriptive statistics"""

df = pd.DataFrame(data)
df.describe()

"""Histograms for numerical variables"""

data = pd.DataFrame(data)
data.hist(figsize=(10, 6))
plt.show()

"""Box plots for numerical variables"""

# Assuming df is your DataFrame with columns 'Category' and 'Value'
df['Value'] = [0,1, 2, 3, 4, 5,6, 7]

# Group the DataFrame by 'Category' and extract the 'Value' column
grouped_df = df.groupby('Category')['Value']

# Convert the grouped data to a list for boxplot
data_to_plot = [group.values for name, group in grouped_df]

# Create a boxplot using Matplotlib
plt.boxplot(data_to_plot, labels=grouped_df.groups.keys())
plt.xlabel('Category')
plt.ylabel('Value')
plt.title('Boxplot of Values by Category')
plt.show()

"""Bivariate Analysis

Scatter plots
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

# data
import pandas as pd
data = pd.DataFrame({'variable1': [3,4,5,6,7],
                     'variable2': [6,5,4,3,2]})

# Check the column names and data types
print(data.columns)
print(data.dtypes)

# Plotting
sns.scatterplot(x='variable1', y='variable2', data=data)
plt.show()

"""Correlation matrix"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

corr_matrix = data.corr()
sns.heatmap(corr_matrix,cmap='plasma', annot=True, )
plt.show()

"""Pairplot for multiple variables"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/train.csv')

sns.pairplot(data)
plt.show()

